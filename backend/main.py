# =============================================================================
# 1. –ò–ú–ü–û–†–¢–´ –ò –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø
# =============================================================================
import asyncio
from contextlib import asynccontextmanager
from fastapi import FastAPI, APIRouter, BackgroundTasks
from fastapi.staticfiles import StaticFiles
from pydantic import BaseModel
import os

from Math.BKNS import BKNS
from opc_adapter import OPCAdapter

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
SERVER_URL = os.getenv("OPC_SERVER_URL", "opc.tcp://0.0.0.0:4840")
if SERVER_URL == "opc.tcp://0.0.0.0:4840":
    print("OPC_SERVER_URL from Docker compose is None, using default")

simulation_is_running = asyncio.Event()
simulation_manager = {"main_bkns": BKNS()}
previous_model_state = {}


def flatten_status_for_opc(status_dict: dict) -> dict:
    """
    –¢—É–ø–æ–π –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä. –ë–µ—Ä–µ—Ç —Å–ª–æ–≤–∞—Ä—å –æ—Ç get_status() –∏ –¥–µ–ª–∞–µ—Ç –µ–≥–æ –ø–ª–æ—Å–∫–∏–º –¥–ª—è OPC.
    –ù–µ –ª–µ–∑–µ—Ç –≤ –º–æ–¥–µ–ª—å. –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ —Ç–µ –∂–µ, —á—Ç–æ –∏ –Ω–∞ —Ñ—Ä–æ–Ω—Ç–µ.
    """
    flat = {}

    # –ù–∞—Å–æ—Å—ã
    for pump_id, pump_data in status_dict.get('pumps', {}).items():
        prefix = f"pump_{pump_id}"
        flat[prefix] = {
            "na_on": pump_data.get('is_running', False),
            "na_off": pump_data.get('is_off', True),
            "motor_current": pump_data.get('current', 0.0),
            "pressure_in": pump_data.get('pressure_in', 0.0),  # <--- –ë–ï–†–ï–¢ –ò–ó –¢–û–ì–û –ñ–ï –ú–ï–°–¢–ê, –ß–¢–û –ò –§–†–û–ù–¢
            "pressure_out": pump_data.get('outlet_pressure', 0.0),
            "flow_rate": pump_data.get('flow_rate', 0.0),
            "cover_open": pump_data.get('di_kojuh_status', True),
            "temp_bearing_1": pump_data.get('temperatures', {}).get('T2', 0.0),
            "temp_bearing_2": pump_data.get('temperatures', {}).get('T3', 0.0),
            "temp_motor_1": pump_data.get('temperatures', {}).get('T4', 0.0),
            "temp_motor_2": pump_data.get('temperatures', {}).get('T5', 0.0),
            "temp_water": pump_data.get('temperatures', {}).get('T5', 0.0) # –ò—Å–ø–æ–ª—å–∑—É–µ–º T5 –∫–∞–∫ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É –≤–æ–¥—ã
        }

    # –ú–∞—Å–ª–æ—Å–∏—Å—Ç–µ–º—ã
    for oil_id, oil_data in status_dict.get('oil_systems', {}).items():
        prefix = f"oil_system_{oil_id}"
        flat[prefix] = {
            "oil_sys_running": oil_data.get('is_running', False),
            "oil_sys_pressure_ok": oil_data.get('pressure_ok', False),
            "oil_pressure": oil_data.get('pressure', 0.0),
            "temperature": oil_data.get('temperature', 0.0),
        }

    # –ó–∞–¥–≤–∏–∂–∫–∏
    for valve_key, valve_data in status_dict.get('valves', {}).items():
        prefix = f"valve_{valve_key}"
        flat[prefix] = {
            "valve_open": valve_data.get('is_open', False),
            "valve_closed": valve_data.get('is_closed', True),
        }

    return flat

async def update_opc_from_model_state(force_send_all=False):
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–æ–¥–µ–ª–∏ —Å OPC-—Å–µ—Ä–≤–µ—Ä–æ–º.
    """
    global previous_model_state
    model = simulation_manager["main_bkns"]
    if force_send_all:
        print("[SYNC] –ó–∞–ø—É—Å–∫ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –ø–æ–ª–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏...")
    
    # === –ù–û–í–´–ô –ù–ê–î–ï–ñ–ù–´–ô –°–ü–û–°–û–ë ===
    # 1. –ü–æ–ª—É—á–∞–µ–º –û–î–ò–ù —Ä–∞–∑ –¥–∞–Ω–Ω—ã–µ, –∫–∞–∫ –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞. –≠—Ç–æ –Ω–∞—à "–∏—Å—Ç–æ—á–Ω–∏–∫ –ø—Ä–∞–≤–¥—ã".
    raw_status = model.get_status()
    # 2. –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏—Ö –≤ –ø–ª–æ—Å–∫–∏–π –≤–∏–¥ –¥–ª—è OPC.
    current_state = flatten_status_for_opc(raw_status)
    # ================================
    for (component, param), value in control_logic.manual_overrides.items():
        control_logic.process_command("MODEL", component, param, None)
    
    for component, params in current_state.items():
        for param, value in params.items():
            key = (component, param)
            override_exists = (key in control_logic.manual_overrides)

            if force_send_all or override_exists or previous_model_state.get(key) != value:
                control_logic.process_command("MODEL", component, param, value)
                previous_model_state[key] = value


    
    if force_send_all:
        print("[SYNC] –ü–æ–ª–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")

# =============================================================================
# 2. –û–°–ù–û–í–ù–ê–Ø –ë–ò–ó–ù–ï–°-–õ–û–ì–ò–ö–ê
# =============================================================================
class ControlLogic:
    def __init__(self):
        self.state_cache = {}
        self.control_modes = {
            "pump_0": "MODEL",
            "pump_1": "MODEL",
            "valve_in_0": "MODEL",
            "valve_out_0": "MODEL",
            "valve_in_1": "MODEL",
            "valve_out_1": "MODEL",
            "oil_system_0": "MODEL",
            "oil_system_1": "MODEL",
        }
        self.manual_overrides = {}

    def debug_print_overrides(self):
        print("=== –¢–µ–∫—É—â–∏–µ overrides ===")
        for key, val in self.manual_overrides.items():
            print(f"üîß {key[0]}.{key[1]} = {val}")
        
    def get_control_modes(self):
        return self.control_modes

    def set_control_source(self, component, source):
        if source not in ["MODEL", "MANUAL"]:
            return {"status": "ERROR", "message": "–ù–µ–≤–µ—Ä–Ω—ã–π —Ä–µ–∂–∏–º"}
        self.control_modes[component] = source
        return {"status": "OK"}
    
    def set_manual_overrides(self, component, overrides_dict):
        for param, value in overrides_dict.items():
            try:
                parsed = float(value)
                self.manual_overrides[(component, param)] = parsed
                print(f"[OVERRIDE] —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {component}.{param} = {parsed}")
            except (ValueError, TypeError):
                print(f"[OVERRIDE] –ø—Ä–æ–ø—É—â–µ–Ω–æ: {component}.{param} ‚Üí {value} (–Ω–µ —á–∏—Å–ª–æ)")

    def process_command(self, source, component, param, value):
        print(f"[CONTROL] source={source}, component={component}, param={param}, value={value}")

        override_value = self.manual_overrides.get((component, param))

        if override_value is not None:
            print(f"[OVERRIDE->OPC] –∑–∞–º–µ–Ω—è–µ–º {component}.{param} = {value} –Ω–∞ {override_value}")
            value = override_value

        # üî• override –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ OPC –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–∂–∏–º–∞
        if opc_adapter and opc_adapter.is_running:
            print(f"[SEND->OPC] {component}.{param} = {value} [OVERRIDE]")
            asyncio.create_task(opc_adapter.send_to_opc(component, param, value))
        else:
            print(f"[SKIP OPC] OPC –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –∏–ª–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: {component}.{param}")
        return {"status": "OVERRIDDEN"}
        
         
        if self.control_modes.get(component) != source:
            print(f"[CONTROL] –ò–≥–Ω–æ—Ä: —Ä–µ–∂–∏–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ - {self.control_modes.get(component)}")
            return {"status": "IGNORED"}

        # –í—Å–µ–≥–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ OPC, –µ—Å–ª–∏ –æ–Ω —Ä–∞–±–æ—Ç–∞–µ—Ç
        if opc_adapter and opc_adapter.is_running:
            print(f"[SEND->OPC] {component}.{param} = {value}")
            asyncio.create_task(opc_adapter.send_to_opc(component, param, value))
        else:
            print(f"[SKIP OPC] OPC –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –∏–ª–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: {component}.{param}")
            
            
        if source == "MANUAL":
            # –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º, overrides —Ç–µ–ø–µ—Ä—å –∏–¥—É—Ç —á–µ—Ä–µ–∑ –æ—Ç–¥–µ–ª—å–Ω—ã–π API
            pass


        model = simulation_manager["main_bkns"]
        type_, id_ = component.rsplit("_", 1)
        id_ = int(id_)

        if type_ == "pump":
            if param == "na_start": model.control_pump(id_, True)
            elif param == "na_stop": model.control_pump(id_, False)
        elif type_ == "valve_out":
            model.control_valve(f"in_{id_}", param == "valve_open")
            model.control_valve(f"out_{id_}", param == "valve_open")
        elif type_ == "oil_system":
            model.control_oil_pump(id_, param == "oil_pump_start")

        return {"status": "OK"}

# =============================================================================
# 3. –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ì–õ–û–ë–ê–õ–¨–ù–´–• –û–ë–™–ï–ö–¢–û–í
# =============================================================================
control_logic = ControlLogic()
opc_adapter = OPCAdapter(SERVER_URL, control_logic, simulation_manager, update_opc_from_model_state)


# =============================================================================
# 4. –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò –ò –§–û–ù–û–í–´–ï –ó–ê–î–ê–ß–ò
# =============================================================================
async def update_loop():
    """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–æ–¥–µ–ª–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ OPC."""
    print(">>> update_loop —Å—Ç–∞—Ä—Ç—É–µ—Ç <<<", flush=True)
    while True:
        await simulation_is_running.wait()
        simulation_manager["main_bkns"].update_system()
        await update_opc_from_model_state(force_send_all=False)
        await asyncio.sleep(1)


# =============================================================================
# 5. –û–ü–†–ï–î–ï–õ–ï–ù–ò–ï API –≠–ù–î–ü–û–ò–ù–¢–û–í
# =============================================================================
api_router = APIRouter(prefix="/api")

class ManualParamCommand(BaseModel):
    source: str
    component: str
    param: str
    value: float

@api_router.get("/simulation/status")
def get_state():
    return simulation_manager["main_bkns"].get_status()

@api_router.get("/simulation/control_modes")
def get_modes():
    return control_logic.get_control_modes()

@api_router.post("/simulation/control/manual")
def manual_cmd(cmd: ManualParamCommand):
    return control_logic.process_command(cmd.source, cmd.component, cmd.param, cmd.value)

@api_router.post("/simulation/sync")
async def sync(background_tasks: BackgroundTasks):
    if not opc_adapter or not opc_adapter.is_running:
        return {"status": "ERROR", "message": "OPC –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω"}
    background_tasks.add_task(update_opc_from_model_state, force_send_all=True)
    return {"status": "ACCEPTED"}

@api_router.get("/simulation/mode")
def get_simulation_mode():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º —Å–∏–º—É–ª—è—Ü–∏–∏ (running/paused)."""
    return {"status": "running" if simulation_is_running.is_set() else "paused"}

# main.py -> –°–µ–∫—Ü–∏—è 5

@api_router.post("/simulation/pause")
def pause_simulation():
    if not simulation_is_running.is_set():
        return {"status": "already_paused"}
    simulation_is_running.clear()
    print("[SYSTEM] –°–∏–º—É–ª—è—Ü–∏—è –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –Ω–∞ –ø–∞—É–∑—É.")
    return {"status": "paused"}

@api_router.post("/simulation/resume")
def resume_simulation():
    if simulation_is_running.is_set():
        return {"status": "already_running"}
    simulation_is_running.set()
    print("[SYSTEM] –°–∏–º—É–ª—è—Ü–∏—è –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∞.")
    return {"status": "resumed"}

class ControlSourceCommand(BaseModel):
    source: str
    component: str

@api_router.post("/simulation/control/set_source")
def set_control_source(cmd: ControlSourceCommand):
    return control_logic.set_control_source(cmd.component, cmd.source)

@api_router.post("/simulation/control/overrides")
def set_manual_overrides(payload: dict):
    print("[POST /control/overrides] payload:", payload)
    component = payload.get("component")
    overrides = payload.get("overrides", {})

    if not component or not isinstance(overrides, dict):
        return {"status": "ERROR", "message": "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø—Ä–æ—Å–∞"}

    control_logic.set_manual_overrides(component, overrides)
    print("[POST /control/overrides] —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ:", control_logic.manual_overrides)
    return {"status": "OK"}

        
@api_router.get("/simulation/debug/overrides")
def debug_overrides():
    return {
        "overrides": {
            f"{k[0]}.{k[1]}": v for k, v in control_logic.manual_overrides.items()
        }
    }

        


# =============================================================================
# 6. –°–ë–û–†–ö–ê –ò –ó–ê–ü–£–°–ö –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø FASTAPI
# =============================================================================
@asynccontextmanager
async def lifespan(app: FastAPI):
    """–£–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–æ–Ω–æ–≤—ã–º–∏ –∑–∞–¥–∞—á–∞–º–∏ –≤–æ –≤—Ä–µ–º—è –∂–∏–∑–Ω–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
    simulation_is_running.set()
    opc_task = asyncio.create_task(opc_adapter.run())
    model_task = asyncio.create_task(update_loop())
    yield
    print("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã, –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á...")
    await opc_adapter.disconnect()
    model_task.cancel()
    opc_task.cancel()
    await asyncio.gather(model_task, opc_task, return_exceptions=True)

app = FastAPI(lifespan=lifespan)

### –ü–æ–¥–∫–ª—é—á–µ–º –∫ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥—É 
app.include_router(api_router)

STATIC_FILES_DIR = os.getenv("STATIC_FILES_DIR")

if STATIC_FILES_DIR is None:
    STATIC_FILES_DIR = "./backend/build/"
    
app.mount("/", StaticFiles(directory=STATIC_FILES_DIR, html=True), name="static")
