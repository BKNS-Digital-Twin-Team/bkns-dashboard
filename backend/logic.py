import asyncio

# –ö–ª–∞—Å—Å ControlLogic —Ç–µ–ø–µ—Ä—å –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –Ω—É–∂–Ω—ã–µ –µ–º—É —Å–ª–æ–≤–∞—Ä–∏ –∏–∑ state.py, –∞ –Ω–µ –∏—â–µ—Ç –∏—Ö –≥–ª–æ–±–∞–ª—å–Ω–æ
from state import control_modes, manual_overrides, opc_adapters, sessions


class ControlLogic:
    def __init__(self):
        self.manual_overrides = manual_overrides
        self.control_modes = control_modes
         
    def set_manual_override(self, session_id, component, param, value):
        self.manual_overrides.setdefault(session_id, {})
        self.manual_overrides[session_id][(component, param)] = float(value)
    
    def clear_manual_override(self, session_id, component, param):
        if session_id in self.manual_overrides:
            self.manual_overrides[session_id].pop((component, param), None)    

    def debug_print_overrides(self):
        for sid, overrides in self.manual_overrides.items():
            print(f"=== Overrides –¥–ª—è —Å–µ—Å—Å–∏–∏ {sid} ===")
            for (component, param), val in overrides.items():
                print(f"üîß {component}.{param} = {val}")
                
    def set_control_source(self, session_id, component, source):
        if source not in ["MODEL", "MANUAL"]:
            return {"status": "ERROR", "message": "–ù–µ–≤–µ—Ä–Ω—ã–π —Ä–µ–∂–∏–º"}
        self.control_modes.setdefault(session_id, {})
        self.control_modes[session_id][component] = source
        return {"status": "OK"}

    def process_command(self, session_id, component_id, param, value):
        # self.control_modes.setdefault(session_id, {})
        # self.control_modes[session_id].setdefault(component, "MODEL")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –¥–µ–π—Å—Ç–≤–∏—è –≤ –º–æ–¥–µ–ª–∏
        model = sessions.get(session_id)
        
        if not model:
            print(f"[ControlLogic] –ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è —Å–µ—Å—Å–∏–∏ {session_id}")
            return {"status": "ERROR", "message": "–ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"}
    
        try:
            component_parts = component_id.split("_")
            # component_, id_ = component_id.rsplit("_", 1)
            # id_ = int(id_)
            # pump_name, param = param.split("_", 1)
            
            if component_parts[0] == "pump":
                if param  == "na2_start": model.control_pump(int(component_parts[1]), True)
                elif param == "na2_stop": model.control_pump(int(component_parts[1]), False)
            
            elif component_parts[0]  == "oil":
                if param == 'NA2_oil_motor_start': model.control_oil_pump(int(component_parts[2]), True)
                elif param == 'NA2_oil_motor_stop': model.control_oil_pump(int(component_parts[2]), False)
            
            elif component_parts[0]  == "valve":
                if param == 'NA2_CMD_Zadv_Open': model.control_valve(f"{component_parts[1]}_{component_parts[2]}", True)
                elif param == 'NA2_CMD_Zadv_Close': model.control_valve(f"{component_parts[1]}_{component_parts[2]}", False)
            
            print(f"[ControlLogic] –í –º–æ–¥–µ–ª—å –ø–µ—Ä–µ–¥–∞–Ω —Ç–µ–≥ {component_parts} —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º {param}")
            return {"status": "OK"}
        
        except Exception as e:
            print(f"[ControlLogic] –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã: {e}")
            return {"status":"ERROR", "message":str(e)}
    
    def send_command_to_opc(self, session_id, component, param, value):
        adapter = opc_adapters.get(session_id)
        if adapter is None or not adapter.is_running:
            print(f"[SKIP OPC] –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ OPC –¥–ª—è —Å–µ—Å—Å–∏–∏ {session_id}")
            return {"status": "NO_OPC"}
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å –æ–≤–µ—Ä—Ä–∞–π–¥ ‚Äî –ø–æ–¥–º–µ–Ω—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ
        override_value = self.manual_overrides.get(session_id, {}).get((component, param))
        if override_value is not None:
            print(f"[OVERRIDE->OPC] –∑–∞–º–µ–Ω—è–µ–º {component}.{param} –Ω–∞ {override_value}")
            value = override_value
            
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ OPC
        asyncio.create_task(adapter.send_to_opc(component, param, value))

control_logic = ControlLogic()